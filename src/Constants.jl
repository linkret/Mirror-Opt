
const N = 16

const POINT_VALUE_MATRIX = [
    4 2 6 3 1 5 8 7 6 9 1 9 4 7 8 3;
    8 7 1 5 6 3 2 4 9 5 7 3 6 9 1 8;
    8 9 5 8 4 7 9 6 1 8 3 4 8 6 5 7;
    1 9 3 2 7 6 1 2 4 9 5 7 3 2 8 6;
    9 7 4 6 5 1 7 8 6 3 2 8 1 5 2 9;
    2 8 4 1 9 9 3 7 2 6 4 5 8 3 9 1;
    3 5 8 5 2 6 4 8 9 1 6 1 2 4 3 9;
    5 1 8 4 3 9 2 1 7 5 3 7 9 7 4 2;
    7 8 2 9 6 4 7 3 5 4 8 9 6 1 7 5;
    4 2 6 3 1 5 9 5 8 2 9 4 3 6 1 8;
    5 4 1 6 9 2 3 7 1 5 4 6 7 2 8 3;
    6 3 7 2 4 8 5 6 9 3 2 7 1 8 5 4;
    2 9 5 1 7 4 1 3 6 5 8 4 7 3 2 6;
    7 4 3 5 2 6 6 1 2 4 1 7 5 9 3 8;
    1 6 2 4 8 5 3 7 4 9 3 2 6 1 7 5;
    7 5 9 3 6 9 8 2 7 4 6 2 8 5 8 1
]
# TODO: verify value matrix matches official problem statement

const EXAMPLE_SOLUTION = [
    '.' 'f' '.' 'v' 'v' 'v' 'V' 'V' 'V' '.' '.' '.' 'z' 'Z' '.' '.';
    'f' 'f' '.' '.' '.' 'v' 'V' '.' '.' '.' 'z' 'z' 'z' 'Z' 'Z' 'Z';
    '.' 'f' 'f' '.' '.' 'v' 'V' '.' '.' '.' 'z' '.' '.' '.' '.' 'Z';
    '.' 'F' 'F' '.' '.' '.' '.' '.' '.' '.' '.' '.' '.' '.' '.' '.';
    'F' 'F' '.' '.' 't' '.' '.' 'T' '.' '.' '.' 'X' '.' '.' 'x' '.';
    '.' 'F' '.' '.' 't' '.' '.' 'T' '.' '.' 'X' 'X' 'X' 'x' 'x' 'x';
    '.' '.' '.' 't' 't' 't' 'T' 'T' 'T' '.' '.' 'X' '.' '.' 'x' '.';
    'I' 'i' '.' '.' '.' '.' '.' '.' '.' '.' '.' '.' '.' '.' '.' '.';
    'I' 'i' '.' 'L' '.' '.' '.' '.' '.' '.' 'N' 'N' '.' 'U' 'U' 'U';
    'I' 'i' '.' 'L' 'L' 'L' 'L' '.' 'N' 'N' 'N' '.' '.' 'U' '.' 'U';
    'I' 'i' '.' 'l' 'l' 'l' 'l' '.' 'n' 'n' 'n' '.' '.' 'u' '.' 'u';
    'I' 'i' '.' 'l' '.' '.' '.' '.' '.' '.' 'n' 'n' '.' 'u' 'u' 'u';
    '.' '.' '.' '.' '.' 'y' 'y' 'y' 'y' '.' '.' '.' '.' '.' '.' '.';
    'P' 'P' 'p' 'p' '.' '.' '.' 'y' '.' '.' 'w' '.' '.' '.' '.' 'W';
    'P' 'P' 'p' 'p' '.' '.' '.' 'Y' '.' '.' 'w' 'w' '.' '.' 'W' 'W';
    'P' '.' '.' 'p' '.' 'Y' 'Y' 'Y' 'Y' '.' '.' 'w' 'w' 'W' 'W' '.'
]
# TODO: verify, seems fine

const A = POINT_VALUE_MATRIX
const H, W = N, N

# Derived pentomino base shapes from the uppercase placements in EXAMPLE_SOLUTION.
# Shapes are returned as 5 relative (x,y) offsets with min x/y at 0.
const SHAPES = Dict(
    :F => [(0, 1), (1, 0), (1, 1), (1, 2), (2, 0)], 
    :V => [(0, 0), (0, 1), (0, 2), (1, 0), (2, 0)], 
    :X => [(0, 1), (1, 0), (1, 1), (1, 2), (2, 1)], 
    :Z => [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)], 
    :N => [(0, 1), (1, 1), (2, 0), (2, 1), (3, 0)], 
    :Y => [(0, 1), (1, 1), (2, 0), (2, 1), (3, 1)], 
    :T => [(0, 2), (1, 0), (1, 1), (1, 2), (2, 2)], 
    :P => [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1)], 
    :I => [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)], 
    :U => [(0, 0), (0, 1), (1, 0), (2, 0), (2, 1)], 
    :W => [(0, 2), (1, 1), (1, 2), (2, 0), (2, 1)], 
    :L => [(0, 0), (0, 1), (1, 1), (2, 1), (3, 1)]
)

const LETTERS = [:F, :I, :L, :N, :P, :T, :U, :V, :W, :X, :Y, :Z]

const DIRS = Dict(:U => (0,-1), :D => (0,1), :L => (-1,0), :R => (1,0))